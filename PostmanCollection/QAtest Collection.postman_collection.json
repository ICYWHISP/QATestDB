{
	"info": {
		"_postman_id": "fea7ade7-8c40-498d-8670-41052f2a40ec",
		"name": "QAtest Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20035450"
	},
	"item": [
		{
			"name": "QAtest Request",
			"item": [
				{
					"name": "LIST USERS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {                        \r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body \r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users?page=2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body \r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users/?id={{parce}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{parce}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST <RESOURCE>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body \r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/unknown",
							"host": [
								"{{url}}"
							],
							"path": [
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE <RESOURCE>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body \r",
									"\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/unknown/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"unknown",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELAYED RESPONSE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"// The test checks that the timeout works correctly\r",
									"\r",
									"var ref = Number(pm.request.url.query.get(\"delay\"))*1000;\r",
									" \r",
									"\r",
									"pm.test(\"Response time is above than parameter\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(ref);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users?delay=3",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"job\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"name\",\r",
									"        \"job\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER - SUCCESSFUL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"token\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGIN - SUCCESSFUL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"token\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"token\", \r",
									"    ],\r",
									"    \"additionalProperties\": false\r",
									"}\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"job\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedata\": {\r",
									"            \"updatedAT\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"name\",\r",
									"        \"job\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"// The test checks the json schema of the request and response body\r",
									"\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"job\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedata\": {\r",
									"            \"updatedAT\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"name\",\r",
									"        \"job\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Схема корректна\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The test checks the status code of the request\r",
									"\r",
									"pm.test(\"Check status\", function() {\r",
									"        pm.response.to.have.status(204)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users/2",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "parce",
			"value": "",
			"type": "string"
		}
	]
}